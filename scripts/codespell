#!/usr/bin/python

import sys
from optparse import OptionParser
from codespell import CodeChecker, error

def main():
    parser = OptionParser(usage="%prog [options] filename ...")
    parser.add_option("-u", "--unique", action='store_true',
                      help="report each misspelling only once")
    parser.add_option("-d", "--dictionary",
                      action='append', dest='dictionaries', default=[],
                      metavar="DICT",
                      help="use custom dictionary DICT (can be a filename "
                           "or a dictionary name)")
    parser.add_option("-x", "--exclude", action='append', default=[],
                      metavar="STR",
                      help="exclude STR from spell-checking -- strip it from "
                           "input text before splitting into words")
    parser.add_option("-C", "--compound", action='store_true',
                      help="allow compound words (eg. getall) [default]")
    parser.add_option("--no-compound",
                      action='store_false', dest='compound',
                      help="don't allow compound words")
    parser.add_option("-W", "--wordlen", type='int', default=2,
                      metavar="N",
                      help="ignore words with <= N characters")
    (options, args) = parser.parse_args()
    if not args:
        parser.error("not enough arguments")

    any_errors = False
    for filename in args:
        try:
            checker = CodeChecker(filename)
        except IOError, err:
            error("%s: %s" % (filename, err.strerror))
            any_errors = True
        else:
            checker.set_unique(options.unique)
            for dictionary in options.dictionaries:
                checker.add_dictionary(dictionary)
            ispell = checker.get_spell_checker()
            ispell.set_allow_compound(options.compound)
            ispell.set_word_len(options.wordlen)
            for s in options.exclude:
                checker.exclude_string(s)
            if checker.check_file():
                any_errors = True

    sys.exit(any_errors and 1 or 0)

main()
